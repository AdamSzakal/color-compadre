import nearestColor from 'nearest-color';
import namedColors from 'color-name-list';
import Chroma from 'chroma-js';

// initate variables
let hueScale,
    lightnessScale,
    startingHue,
    startingHueName,
    endingHue,
    endingHueName,
    sections = document.querySelectorAll('section'),
    divs = document.querySelectorAll('div'),
    swatches = document.querySelectorAll('.swatch'),
    colorNames = document.querySelectorAll('.color-name'),
    colorHexes = document.querySelectorAll('color-hex');
// 丘멆잺 Jag t칛nker h칛r att man borde samla all data f칬rst, innan man b칬rjar loopa igenom det. Fr친gan 칛r bara hur man f친r en array f칬r varje kolumn (section) s친 att man fortfarande f친r till ljushetsskiftningen

// initiate colors to work with
const colorInit = function() {
    hueScale = Chroma.scale([Chroma.random(), Chroma.random()]).mode('lch');
    // The change in hue, going from left to right 游녡
    startingHue = hueScale(0);
    endingHue = hueScale(1);
    return hueScale, startingHue, endingHue;
};

// color dom elements
const colorDOM = function(el) {

    el.forEach(function(section, index) {
        // generate a "base color" 游녢
        let currentColor = hueScale(index / el.length);
        // generate an array of colors going from white to black, via the "base color" 游녢
        const lightnessScale = Chroma.scale(['white', currentColor, 'black']).mode(
            'lch',
        );

        // loop through all nodes for each section 游녢
        section.childNodes.forEach(function(div, index) {

            let childNodeColor = Chroma(
                lightnessScale(index / section.childNodes.length)
            ).hex();

            let someColor = namedColors.colorNameList.find(
                color => color.hex === childNodeColor
            );

            // Get color names from API
            let request = new XMLHttpRequest();
            request.open('GET', 'https://api.color.pizza/v1/' + childNodeColor.replace(/[^0-9]/, ''), true);
            request.onload = function() {
                let data = JSON.parse(this.response);
                if (request.status >= 200 && request.status < 400) {
                    div.innerHTML = "<p>" + data.colors[0].name + "</p>"
                } else {
                    console.log('error');
                }
            };
            request.send();

            div.style = 'background-color: ' + childNodeColor;
        });
    });
};
colorInit();
colorDOM(sections);